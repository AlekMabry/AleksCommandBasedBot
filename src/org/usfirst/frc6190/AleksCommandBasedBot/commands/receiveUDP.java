// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6190.AleksCommandBasedBot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6190.AleksCommandBasedBot.Robot;
import org.usfirst.frc6190.AleksCommandBasedBot.subsystems.UDP;

import java.io.*;
import java.net.*;

/**
 *
 */

public class receiveUDP extends Command {
	
	byte[] receiveData;
	byte[] sendData;
	boolean end;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public receiveUDP() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.uDP);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	receiveData = new byte[1024];
    	sendData = new byte[1024];
    	end = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Receive Data
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        try {
			UDP.serverSocket.receive(receivePacket);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        String sentence = new String(receivePacket.getData());
        String[] parts = sentence.split(" ");
        String part1 = parts[0];
        double part1a = Double.parseDouble(part1);
        System.out.println("RECEIVED: " + part1);
        //new turnDegrees(part1a);
        //end = true;
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (end == false) {
    		return false;
    	} else {
    		return true;
    	}
        
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
